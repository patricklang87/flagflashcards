{"version":3,"sources":["components/nav.js","components/home.js","redux/fetchFlags.js","redux/cardFlip.js","components/regionSelector.js","components/searchBar.js","components/countryList.js","redux/flagQuizRedux.js","components/quizSetup.js","components/scoreQuiz.js","components/quizBody.js","components/quizScoreDisplay.js","components/quizResults.js","components/flagQuiz.js","components/FlashCards.js","components/knownFlags.js","App.js","redux/store.js","index.js"],"names":["Nav","to","className","Home","flags","useSelector","state","flipCard","deck","flagsPrepped","map","country","src","flag","alt","name","length","style","color","fetchFlags","a","fetch","json","console","log","cardFlipSlice","createSlice","initialState","region","searchTerm","reducers","loadCards","action","newDeck","payload","card","index","isFlipped","isSelected","isMemorized","mainDeckIndex","changeRegion","flip","updatedDeck","push","updateSearchTerm","deleteSearchTerm","toggleMemorization","markAsKnown","markAsUnknown","actions","RegionSelector","dispatch","useDispatch","allRegions","regionList","Set","value","for","onChange","e","selectedRegion","target","SearchBar","newSearchTerm","type","onClick","CountryList","currentRegion","currentDeckByRegion","filter","displayDeck","toLowerCase","includes","capital","population","subregion","noResults","flagQuizSlice","quizGenerated","quizInProgress","setToDifficult","currentQuizQuestions","lastScore","currentTopScore","currentQuestion","quizLength","changeQuizLength","generateQuiz","handleSelection","questionNumber","questionIndex","selectedAnswer","optionIndex","answerOptions","assessQuiz","closeCurrentQuiz","incrementQuestion","decrementQuestion","toggleDifficulty","QuizSetup","flagQuiz","currentDeck","newQuizLength","min","max","quizDeck","answerIndices","i","Math","floor","random","correctAnswer","difficultOptions","optionsDeck","optionIndices","j","optionNumber","correctAnswerSpliceIndex","splice","questionPacket","QuizScorer","score","question","option","percentage","parseInt","QuizBody","quizQuestions","options","choice","border","firstQuestion","lastQuestion","disabledStyle","quizNav","currentQuestionDis","QuizScoreDisplay","QuizResults","mainDeck","colorForCorrect","backgroundColor","colorForIncorrect","resultsDiv","item","responseDisplay","selectedResponse","optionIfCorrect","optionIfIncorrect","correctResponse","isCorrect","correctResponseDisplay","closeQuiz","FlagQuiz","activeRegion","inProgress","FlashCards","cards","flipStatus","transform","KnownFlags","unmemorizedCards","memorizedCards","App","useEffect","exact","path","component","href","configureStore","reducer","flipCardReducer","flagQuizReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.f9ffe236.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n\r\n    return (\r\n        <>\r\n        <nav>   \r\n           <Link to=\"/\">Home</Link>  \r\n            <Link to=\"/CountryList\">Country List</Link> \r\n            <Link to=\"/KnownFlags\">Manage Flags</Link> \r\n            <Link to=\"/FlashCards\">Flash Cards</Link>   \r\n            <Link to=\"/FlagQuiz\">Flag Quiz</Link> \r\n            <h3 className=\"viewNav\" >Navigation</h3>    \r\n        </nav>\r\n        \r\n        </>\r\n    );\r\n}\r\n\r\nexport default Nav;","import { useSelector } from 'react-redux';\r\n\r\nconst Home = () => {\r\n    const flags = useSelector(state => state.flipCard.deck);\r\n\r\n    let flagsPrepped = flags.map((country) => {\r\n        return (\r\n            <img src={country.flag} alt={country.name} />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <h1>Learn Your Flags</h1>\r\n            <h2>Test yourself on the flags of countries and territories around the world.</h2>\r\n            {(flags.length === 0) && <p style={{color: 'red'}}>There was an error communicating with the Restcountries API. Please try again soon.</p>}\r\n            <div className = \"flagBanner\">\r\n                {flagsPrepped}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","\r\n\r\nconst fetchFlags = async () => { \r\n\r\n    try {\r\n        const flags = await fetch('https://restcountries.eu/rest/v2/all');\r\n        return flags.json(); \r\n    } catch (err) {\r\n        console.log(\"The site was unable to communicate with its source API. Please try again soon.\");\r\n    }\r\n\r\n}\r\n\r\nexport const loadFlags = () => {\r\n    return async (dispatch) => {\r\n        const payload = await fetchFlags();\r\n        console.log(payload);\r\n        dispatch({type: \"cardFlip/loadCards\", payload: payload});\r\n    }\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\nimport { fetchFlags } from './fetchFlags';\r\n\r\n\r\nexport const cardFlipSlice = createSlice({\r\n    name: \"cardFlip\",\r\n    initialState: {\r\n        deck: [],\r\n        region: \"All Regions\",\r\n        searchTerm: ''\r\n    },\r\n    reducers: {\r\n        loadCards: (state, action) => {\r\n            let deck = action.payload || []; // added ||[] for instances of api failure\r\n            let newDeck = deck.map((card, index) => {\r\n               return {...card,\r\n            isFlipped: false,\r\n            isSelected: false,\r\n            isMemorized: false,\r\n            mainDeckIndex: index }\r\n            });\r\n            state.deck = newDeck;\r\n        },\r\n        changeRegion: (state, action) => {\r\n            let region = action.payload;\r\n            state.region = region;\r\n        },\r\n        flip: (state, action) => {\r\n            const deck = state.deck;\r\n            let updatedDeck = [];\r\n            for (let card of deck) {\r\n                if (card.name === action.payload) { \r\n                    card.isFlipped = !card.isFlipped\r\n                }\r\n            updatedDeck.push(card);\r\n            }\r\n            state = {\r\n                ...state,\r\n                deck: updatedDeck\r\n            }\r\n        },\r\n        updateSearchTerm: (state, action) => {\r\n            state.searchTerm = action.payload;\r\n        },\r\n        deleteSearchTerm: (state) => {\r\n            state.searchTerm = '';\r\n        },\r\n        toggleMemorization: (state, action) => {\r\n            const deck = state.deck;\r\n            let updatedDeck = [];\r\n            for (let card of deck) {\r\n                if (card.name === action.payload) { \r\n                    card.isMemorized = !card.isMemorized\r\n                }\r\n            updatedDeck.push(card);\r\n            }\r\n            state = {\r\n                ...state,\r\n                deck: updatedDeck\r\n            }\r\n        },\r\n        markAsKnown: (state, action) => {\r\n            const deck = state.deck;\r\n            let updatedDeck = [];\r\n            for (let card of deck) {\r\n                if (card.name === action.payload) { \r\n                    card.isMemorized = true;\r\n                }\r\n            updatedDeck.push(card);\r\n            }\r\n            state = {\r\n                ...state,\r\n                deck: updatedDeck\r\n            }\r\n        },\r\n        markAsUnknown: (state, action) => {\r\n            const deck = state.deck;\r\n            let updatedDeck = [];\r\n            for (let card of deck) {\r\n                if (card.name === action.payload) { \r\n                    card.isMemorized = false;\r\n                }\r\n            updatedDeck.push(card);\r\n            }\r\n            state = {\r\n                ...state,\r\n                deck: updatedDeck\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport const { flip, loadCards, changeRegion, updateSearchTerm, deleteSearchTerm, toggleMemorization, markAsKnown, markAsUnknown } = cardFlipSlice.actions;\r\nexport default cardFlipSlice.reducer;","import { useSelector, useDispatch } from 'react-redux';\r\nimport { changeRegion } from '../redux/cardFlip';\r\n\r\nconst RegionSelector = () => {\r\n    let deck = useSelector(state => state.flipCard.deck);\r\n    let dispatch = useDispatch();\r\n\r\n    const allRegions = deck.map(country => country.region);\r\n    const uniqueRegions = [...new Set(allRegions)];\r\n    let regionList = uniqueRegions.map((region) => {\r\n        return <option value={region} key={region}>{region}</option>;\r\n    });\r\n\r\n    const onChange = (e) => {\r\n        let selectedRegion = e.target.value;\r\n        dispatch(changeRegion(selectedRegion));\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <label for=\"regionSelector\">Select a region: </label>\r\n        <select name=\"regionSelector\" onChange={onChange} >\r\n            <option value=\"All Regions\" key=\"allRegions\">All Regions</option>\r\n            {regionList}\r\n        </select>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default RegionSelector;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { updateSearchTerm, deleteSearchTerm } from '../redux/cardFlip';\r\n\r\nconst SearchBar = () => {\r\n    let dispatch = useDispatch();\r\n\r\n    const onChange = (e) => {\r\n        let newSearchTerm = e.target.value;\r\n        dispatch(updateSearchTerm(newSearchTerm));\r\n    }\r\n\r\n    const onClick = () => {\r\n        dispatch(deleteSearchTerm());\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label for=\"searchBar\">Search: </label>\r\n            <input onChange={onChange} name=\"searchBar\" type=\"text\" />\r\n             <button onClick={onClick} >X</button>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBar;","import { useSelector } from 'react-redux';\r\nimport RegionSelector from './regionSelector';\r\nimport SearchBar from './searchBar';\r\n\r\nconst CountryList = () => {\r\n    let deck = useSelector(state => state.flipCard.deck);\r\n    let currentRegion = useSelector(state => state.flipCard.region);\r\n    let searchTerm = useSelector(state => state.flipCard.searchTerm);\r\n\r\n    let currentDeckByRegion = deck;\r\n    if (currentRegion !== \"All Regions\") {\r\n        currentDeckByRegion = deck.filter((card) => {\r\n            return (card.region === currentRegion)\r\n        });\r\n    }\r\n\r\n    let filteredDeck = currentDeckByRegion.filter((card) => {\r\n        return card.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n    });\r\n\r\n    let displayDeck = filteredDeck.map((country) => {\r\n        let alt = `The flag of ${country.name}`;\r\n        \r\n        return (\r\n        <div className=\"nameFlagDisplay\">\r\n            <div className=\"countryInfo\">\r\n                <h2>{country.name}</h2>\r\n                <h3>Capital City: {country.capital}</h3>\r\n                <h3>Estimated Population: {country.population}</h3>\r\n                <h3>Subregion: {country.subregion}, Region: {country.region}</h3>     \r\n            </div>\r\n            <img className=\"flagImage\" src={country.flag} alt={alt} />\r\n        </div>);\r\n    });\r\n\r\n    const noResults = <h3>This search term returned no results. Please try a different term or region.</h3>\r\n\r\n    return (\r\n        <>\r\n            <h1>Country and Territory Info: {currentRegion}</h1>\r\n            <RegionSelector />\r\n            <SearchBar />\r\n            <div className=\"flagDisplay\">\r\n                {(displayDeck.length > 0) ? displayDeck : noResults}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CountryList;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const flagQuizSlice = createSlice({\r\n    name: \"flagQuizRedux\",\r\n    initialState: {\r\n        quizGenerated: false,\r\n        quizInProgress: false,\r\n        setToDifficult: false,\r\n        currentQuizQuestions: [],\r\n        lastScore: 0,\r\n        currentTopScore: 0,\r\n        currentQuestion: 0,\r\n        quizLength: 5 || this.deck.length\r\n    },\r\n    reducers: {\r\n        changeQuizLength: (state, action) => {\r\n            state.quizLength = action.payload;\r\n        },\r\n        generateQuiz: (state, action) => {\r\n            state.quizInProgress = true;\r\n            state.currentQuizQuestions = action.payload;\r\n            state.quizGenerated = true;\r\n            state.currentQuestion = 0;\r\n        },\r\n        handleSelection: (state, action) => {\r\n            let questionNumber = action.payload.questionIndex;\r\n            let selectedAnswer = action.payload.optionIndex;\r\n            for (let item of state.currentQuizQuestions[questionNumber].answerOptions) {\r\n                item.isSelected = false;\r\n            }\r\n            state.currentQuizQuestions[questionNumber].answerOptions[selectedAnswer].isSelected = true;\r\n        },\r\n        assessQuiz: (state, action) => {\r\n            state.quizInProgress = false;\r\n            state.lastScore = action.payload;\r\n            if (action.payload > state.currentTopScore) state.currentTopScore = action.payload;\r\n        },\r\n        closeCurrentQuiz: (state) => {\r\n            state.quizGenerated = false;\r\n            state.quizInProgress = false;\r\n            state.currentQuizQuestions = [];\r\n        },\r\n        incrementQuestion: (state) => {\r\n            let questionNumber = state.currentQuestion;\r\n            questionNumber++;\r\n            if (questionNumber >= state.quizLength) questionNumber = state.quizLength - 1;\r\n            state.currentQuestion = questionNumber;\r\n        },\r\n        decrementQuestion: (state) => {\r\n            let questionNumber = state.currentQuestion;\r\n            questionNumber--;\r\n            if (questionNumber < 0) questionNumber = 0;\r\n            state.currentQuestion = questionNumber;\r\n        },\r\n        toggleDifficulty: (state) => {\r\n            state.setToDifficult = !state.setToDifficult;\r\n        }\r\n    }\r\n});\r\n\r\nexport const { generateQuiz, handleSelection, assessQuiz, closeCurrentQuiz, changeQuizLength, incrementQuestion, decrementQuestion, toggleDifficulty } = flagQuizSlice.actions;\r\nexport default flagQuizSlice.reducer;","import { useSelector, useDispatch } from 'react-redux';\r\nimport { changeQuizLength } from '../redux/flagQuizRedux';\r\nimport { generateQuiz, toggleDifficulty } from '../redux/flagQuizRedux';\r\n\r\nconst QuizSetup = () => {\r\n    let deck = useSelector(state => state.flipCard.deck) || [];\r\n    let currentRegion = useSelector(state => state.flipCard.region);\r\n    let quizLength = useSelector(state => state.flagQuiz.quizLength);\r\n    let setToDifficult = useSelector(state => state.flagQuiz.setToDifficult);\r\n    let quizGenerated = useSelector(state => state.flagQuiz.quizGenerated);\r\n    let dispatch = useDispatch();\r\n\r\n    let currentDeck = deck;\r\n    if (currentRegion !== \"All Regions\") {\r\n        currentDeck = deck.filter((card) => {\r\n            return (card.region === currentRegion)\r\n        });\r\n    }\r\n\r\n\r\n    \r\n    const generateQuizDeck = () => { \r\n        let quizDeck = [];\r\n        let answerIndices = [];\r\n        for (let i = 0; i < quizLength; i++ ) {\r\n            let questionNumber = Math.floor(Math.random()*currentDeck.length);\r\n            while (answerIndices.includes(questionNumber)) {\r\n                questionNumber = Math.floor(Math.random()*currentDeck.length);\r\n            }\r\n            answerIndices.push(questionNumber);\r\n            const correctAnswer = currentDeck[questionNumber];\r\n\r\n            let difficultOptions = deck.filter((card) => card.subregion === correctAnswer.subregion);\r\n            if (difficultOptions.length < 4) {\r\n                difficultOptions = deck.filter((card) => card.region === correctAnswer.region);\r\n            }\r\n            if (difficultOptions.length < 4) {\r\n                difficultOptions = deck;\r\n            }\r\n\r\n            const optionsDeck = (setToDifficult) ? difficultOptions : deck;\r\n\r\n            console.log(\"optionsDeck: \", optionsDeck);\r\n\r\n            let answerOptions = [];\r\n            let optionIndices = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                let optionNumber = Math.floor(Math.random()*optionsDeck.length);\r\n                while (optionIndices.includes(optionNumber) || currentDeck[questionNumber].name === optionsDeck[optionNumber].name) {\r\n                    optionNumber = Math.floor(Math.random()*optionsDeck.length);\r\n                }\r\n                optionIndices.push(optionNumber);\r\n                answerOptions.push(optionsDeck[optionNumber]);\r\n            }\r\n            let correctAnswerSpliceIndex = Math.floor(Math.random()*3);\r\n            answerOptions.splice(correctAnswerSpliceIndex, 0, correctAnswer, );\r\n     \r\n            const questionPacket = {\r\n                correctAnswer: correctAnswer,\r\n                answerOptions: answerOptions\r\n            }\r\n            \r\n            quizDeck.push(questionPacket);\r\n        }\r\n        console.log(\"quizDeck: \", quizDeck);\r\n        dispatch(generateQuiz(quizDeck));\r\n    }\r\n    \r\n    const onChange = (e) => {\r\n        let newQuizLength = e.target.value;\r\n        dispatch(changeQuizLength(newQuizLength));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>Choose Quiz Length: </h3>\r\n            <br />\r\n            <input name=\"quizLength\" onChange={onChange} type=\"number\" min=\"1\" max={currentDeck.length} /><span> (Max: {currentDeck.length})</span>\r\n            <div onClick={() => dispatch(toggleDifficulty())}>\r\n                <h3>Difficulty: {(setToDifficult) ? `Difficult` : `Normal`}</h3>\r\n            </div>\r\n            <br />\r\n            <button onClick={generateQuizDeck}>Start Quiz</button>\r\n        </div>\r\n    );    \r\n}\r\n\r\nexport default QuizSetup;","import { useSelector, useDispatch } from 'react-redux';\r\nimport { assessQuiz } from '../redux/flagQuizRedux';\r\n\r\nconst QuizScorer = () => {\r\n    let dispatch = useDispatch();\r\n    let quizLength = useSelector(state => state.flagQuiz.quizLength);\r\n    let quizDeck = useSelector(state => state.flagQuiz.currentQuizQuestions);\r\n\r\n    const scoreQuiz = () => {\r\n        let score = 0;\r\n        for (let question of quizDeck) {\r\n            let selectedAnswer = question.answerOptions.filter(option => option.isSelected === true);\r\n            if (selectedAnswer.length > 0) {\r\n                if (selectedAnswer[0].name === question.correctAnswer.name) score++;\r\n            }\r\n            \r\n        }\r\n        let percentage = parseInt((score/quizLength)*100);\r\n        console.log(\"qL: \", quizLength);\r\n        console.log(\"percentage: \", percentage);\r\n        dispatch(assessQuiz(percentage));\r\n    }\r\n\r\n    return (\r\n        <button onClick={scoreQuiz}>Submit</button>\r\n    );\r\n}\r\n\r\nexport default QuizScorer;","import { useSelector, useDispatch } from 'react-redux';\r\nimport { handleSelection, incrementQuestion, decrementQuestion } from '../redux/flagQuizRedux';\r\nimport QuizScorer from './scoreQuiz';\r\n\r\n\r\nconst QuizBody = () => {\r\n    const quizDeck = useSelector(state => state.flagQuiz.currentQuizQuestions);\r\n    let quizInProgress = useSelector(state => state.flagQuiz.quizInProgress);\r\n    let quizGenerated = useSelector(state => state.flagQuiz.quizGenerated);\r\n    let questionNumber = useSelector(state => state.flagQuiz.currentQuestion);\r\n    let dispatch = useDispatch();\r\n\r\n        let quizQuestions = quizDeck.map((question, questionIndex) => {\r\n            let options = question.answerOptions.map((choice, optionIndex) => {\r\n\r\n                const onClick = () => {\r\n                    if (quizInProgress) {\r\n                        dispatch(handleSelection({questionIndex: questionIndex, optionIndex: optionIndex}));\r\n                    }     \r\n                }\r\n\r\n\r\n                const selectedStyle = {\r\n                    border: \"5px solid yellow\"\r\n                };\r\n\r\n                const unselectedStyle = {\r\n                    border: null\r\n                };\r\n\r\n                return (\r\n                    <div className=\"quizOption\">\r\n                        <img onClick={onClick} className=\"quizFlag\" src={choice.flag} alt=\"a flag\" style={choice.isSelected ? selectedStyle : unselectedStyle } />\r\n                    </div>\r\n                );\r\n            })\r\n\r\n            return (\r\n                <div className=\"questionContent\" >\r\n                    <h3>{questionIndex + 1}) Which flag represents <strong>{quizDeck[questionIndex].correctAnswer.name}</strong>?</h3>\r\n                    <div className=\"answerOptions\">\r\n                        {options}\r\n                    </div> \r\n                </div>    \r\n            );\r\n        });\r\n\r\n        const firstQuestion = (questionNumber === 0);\r\n        const lastQuestion = (questionNumber === quizDeck.length - 1);\r\n        const disabledStyle = {\r\n            color: \"lightgrey\",\r\n            border: \"lightgrey 1px solid\"\r\n        }\r\n\r\n        \r\n        const quizNav = (\r\n            <div>\r\n                <button style={firstQuestion ? disabledStyle : null} onClick={() => dispatch(decrementQuestion())} >PREVIOUS</button>\r\n                <button style={lastQuestion ? disabledStyle : null} onClick={() => dispatch(incrementQuestion())} >NEXT</button>\r\n                <br />\r\n                <br />\r\n                <QuizScorer />                            \r\n            </div>     \r\n        );\r\n\r\n        let currentQuestionDis = quizQuestions[questionNumber];\r\n        \r\n\r\n    return (\r\n        <div className=\"quizBody\">\r\n            {quizGenerated && currentQuestionDis}\r\n            <br />\r\n            {quizGenerated && quizNav}    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuizBody;","import { useSelector } from 'react-redux';\r\n\r\nconst QuizScoreDisplay = () => {\r\n\r\n    const lastScore = useSelector(state => state.flagQuiz.lastScore);\r\n    const currentTopScore = useSelector(state => state.flagQuiz.currentTopScore);\r\n\r\n    return (\r\n        <div className=\"scoreDisplay\">\r\n            <h3>Current Score: {lastScore}</h3>\r\n            <h3>Personal Best: {currentTopScore}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuizScoreDisplay;","import { useSelector, useDispatch } from 'react-redux';\r\nimport { closeCurrentQuiz } from '../redux/flagQuizRedux';\r\nimport { markAsKnown, markAsUnknown } from '../redux/cardFlip';\r\n\r\nconst QuizResults = () => {\r\n    const currentQuizQuestions = useSelector(state => state.flagQuiz.currentQuizQuestions);\r\n    const mainDeck = useSelector(state => state.flipCard.deck);\r\n    let dispatch = useDispatch();\r\n\r\n    const colorForCorrect = {\r\n        backgroundColor: \"rgb(208, 247, 208)\"\r\n    };\r\n\r\n    const colorForIncorrect = {\r\n        backgroundColor: \"rgb(247, 208, 208)\"\r\n    };\r\n    \r\n\r\n    const resultsDiv = currentQuizQuestions.map((item, index) => {\r\n        let selectedResponse = item.answerOptions.filter((option) => {\r\n           return option.isSelected === true\r\n        });\r\n\r\n        let responseDisplay;\r\n        if (selectedResponse[0]) {\r\n            responseDisplay = (\r\n                <div>\r\n                    <img src={selectedResponse[0].flag} alt={selectedResponse[0].name} />\r\n                    <p>You selected: {selectedResponse[0].name}.</p> \r\n                </div>\r\n            );\r\n        } else { \r\n            responseDisplay = (\r\n                <div>\r\n                    <p>No response selected.</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const correctResponse = item.correctAnswer;\r\n        const isCorrect = ((selectedResponse[0]) && item.correctAnswer.name === selectedResponse[0].name);\r\n\r\n        const correctResponseDisplay = (\r\n            <div>\r\n                <img src={correctResponse.flag} alt={correctResponse.name} />\r\n                <p>Correct response: {correctResponse.name}.</p>  \r\n            </div> \r\n        );\r\n\r\n        let optionIfCorrect;\r\n        if (!mainDeck[correctResponse.mainDeckIndex].isMemorized) {\r\n            optionIfCorrect = (\r\n                <button onClick={() => {dispatch(markAsKnown(correctResponse.name))}}>Mark as Memorized</button>);\r\n        } else {\r\n            optionIfCorrect = <h3>Memorized &#10004;</h3>;\r\n        }\r\n\r\n        let optionIfIncorrect;\r\n        if (mainDeck[correctResponse.mainDeckIndex].isMemorized) {\r\n            optionIfIncorrect = (\r\n                <button onClick={() => {dispatch(markAsUnknown(correctResponse.name))}}>Mark  {correctResponse.name} as Not Memorized</button>);\r\n        } else {\r\n            optionIfIncorrect = <h3>Not Memorized &#10008;</h3>;\r\n        }\r\n\r\n        return (    \r\n                <div className=\"resultDiv\" style={(isCorrect) ? colorForCorrect : colorForIncorrect} >\r\n                    <p>Question {index + 1}</p>\r\n                    <div className=\"results\">\r\n                        {correctResponseDisplay}\r\n                        {responseDisplay}\r\n                    </div>\r\n                    {(isCorrect) ? optionIfCorrect : optionIfIncorrect}\r\n                </div>\r\n        );\r\n    });\r\n\r\n    const closeQuiz = () => {\r\n        dispatch(closeCurrentQuiz());\r\n    }\r\n\r\n    return (\r\n        <div className=\"resultsComponent\">\r\n            <h2>Results</h2>\r\n            <button onClick={closeQuiz}>Close Results</button>\r\n            <div className=\"allResults\">\r\n                {resultsDiv}\r\n            </div>\r\n            <button onClick={closeQuiz}>Close Results</button> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuizResults;","import QuizSetup from './quizSetup';\r\nimport QuizBody from './quizBody';\r\nimport QuizScoreDisplay from './quizScoreDisplay';\r\nimport QuizResults from './quizResults';\r\nimport RegionSelector from './regionSelector';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst FlagQuiz = () => {\r\n    let activeRegion = useSelector(state => state.flipCard.region);\r\n    let inProgress = useSelector(state => state.flagQuiz.quizInProgress);\r\n    let quizGenerated = useSelector(state => state.flagQuiz.quizGenerated);\r\n\r\n   return (\r\n       <div>\r\n           <h1>Flag Quiz: {activeRegion}</h1>\r\n           <RegionSelector />\r\n           <div className=\"quizInfo\">\r\n            {(!inProgress) && <QuizSetup />}\r\n            <QuizScoreDisplay />\r\n           </div>\r\n           {(inProgress) && <QuizBody />}\r\n           {(quizGenerated && !inProgress) && <QuizResults />}\r\n       </div>\r\n   ); \r\n}\r\n\r\nexport default FlagQuiz;","import React from 'react';\r\nimport RegionSelector from \"./regionSelector\";\r\nimport { flip, toggleMemorization } from '../redux/cardFlip';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n\r\n\r\n\r\nexport const FlashCards = () => {\r\n    const dispatch = useDispatch();\r\n    let cards = useSelector(state => state.flipCard.deck);\r\n    let currentRegion = useSelector(state => state.flipCard.region);\r\n\r\n    // let shuffledCards = [];\r\n    // for (let card of cards) {\r\n    //     let insertAtIndex = Math.floor(Math.random()*shuffledCards.length);\r\n    //     shuffledCards.splice(insertAtIndex, 0, card);\r\n    // }\r\n\r\n    let currentDeck = cards;\r\n    if (currentRegion !== \"All Regions\") {\r\n        currentDeck = cards.filter((card) => {\r\n            return (card.region === currentRegion)\r\n        });\r\n    }\r\n\r\n    let unmemorizedDeck = currentDeck.filter((card) => {\r\n        return !card.isMemorized;\r\n    })\r\n\r\n    let deck = unmemorizedDeck.map((card) => {\r\n        let flipStatus = card.isFlipped ? \"rotateY(0deg)\" : \" rotateY(180deg)\";\r\n\r\n        return (\r\n            <div className=\"cardWrap\" onClick={() => dispatch(flip(card.name))}>\r\n                <div className=\"card\" style={{transform: flipStatus}}>\r\n                    <div className=\"cardFront\">\r\n                        <img className=\"flagImage\" src={card.flag} alt=\"a flag\" />\r\n                    </div>\r\n                    <div className=\"cardBack\">\r\n                        <span>{card.name}</span>\r\n                        <img className=\"flagImage\" src={card.flag} alt=\"a flag\" />\r\n                            <button onClick={() => dispatch(toggleMemorization(card.name))}>I know this one!</button>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n        ); \r\n    });\r\n\r\n    return (\r\n        <div className=\"boardContainer\">\r\n            <h1>Flash Cards: {currentRegion}</h1>\r\n            <RegionSelector />\r\n            <div className=\"boardView\">\r\n                {deck}\r\n            </div>\r\n        </div>    \r\n    );\r\n}","import { useSelector, useDispatch } from 'react-redux';\r\nimport { toggleMemorization } from '../redux/cardFlip';\r\nimport RegionSelector from './regionSelector';\r\nimport SearchBar from './searchBar';\r\n\r\nconst KnownFlags = () => {\r\n    const dispatch = useDispatch();\r\n    const cards = useSelector(state => state.flipCard.deck);\r\n    const searchTerm = useSelector(state => state.flipCard.searchTerm);\r\n    const currentRegion = useSelector(state => state.flipCard.region);\r\n\r\n    let currentDeckByRegion = cards;\r\n    if (currentRegion !== \"All Regions\") {\r\n        currentDeckByRegion = cards.filter((card) => {\r\n            return (card.region === currentRegion)\r\n        });\r\n    }\r\n    const currentDeck = currentDeckByRegion.filter((card) => {\r\n        return (card.name.toLowerCase().includes(searchTerm.toLowerCase()));\r\n    });\r\n\r\n    const unmemorizedCards = currentDeck.filter((card) => {\r\n        return !card.isMemorized;\r\n    }).map((card) => {\r\n        return (\r\n            <div className=\"unmemorizedFlag\" onClick={() => dispatch(toggleMemorization(card.name))} >\r\n                <img src={card.flag} alt={card.name} />\r\n                <h4>{card.name}</h4>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    const memorizedCards = currentDeck.filter((card) => {\r\n        return card.isMemorized;\r\n    }).map((card) => {\r\n        return (\r\n            <div className=\"memorizedFlag\" onClick={() => dispatch(toggleMemorization(card.name))} >\r\n                <img src={card.flag} alt={card.name} />\r\n                <h4>{card.name}</h4>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h1>Manage Flags</h1>\r\n            <RegionSelector />\r\n            <SearchBar />\r\n            <div className=\"knownAndUnknownFlags\">\r\n                <div>\r\n                    <h2>Unmemorized</h2>\r\n                    <div className=\"memFlagList\">\r\n                        {unmemorizedCards}\r\n                    </div>     \r\n                </div>\r\n                <div>\r\n                    <h2>Memorized</h2>\r\n                    <div className=\"memFlagList\">\r\n                        {memorizedCards}\r\n                    </div>  \r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default KnownFlags;","import './App.css';\nimport Nav from './components/nav';\nimport Home from './components/home';\nimport CountryList from './components/countryList';\nimport FlagQuiz from './components/flagQuiz';\nimport { FlashCards } from \"./components/FlashCards\";\nimport KnownFlags from './components/knownFlags';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { loadFlags } from './redux/fetchFlags';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n//reddit toolkit and middleware: https://www.youtube.com/watch?v=qA6oyQQTJ3I\n\n\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadFlags());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Nav />\n        <main>\n          <Switch>\n            <Route exact path='/' component={Home} /> \n            <Route path='/CountryList' exact component={CountryList} />\n            <Route path='/KnownFlags' exact component={KnownFlags} /> \n            <Route path='/FlashCards' exact component={FlashCards} />  \n            <Route path=\"/FlagQuiz\" exact component={FlagQuiz} />  \n          </Switch>  \n        </main>\n      </Router>\n      <footer>\n        <h3>Created with the <a href=\"https://restcountries.eu/\">restcountries.eu</a> API</h3>\n        <h3>A project by <a href=\"https://patricklang87.github.io/portfolio/\" >Patrick Lang</a></h3>\n        <h3>&copy; 2021</h3>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport flipCardReducer from './cardFlip';\r\nimport flagQuizReducer from './flagQuizRedux';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        flipCard: flipCardReducer,\r\n        flagQuiz: flagQuizReducer\r\n    }\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}