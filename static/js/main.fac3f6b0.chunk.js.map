{"version":3,"sources":["components/nav.js","components/home.js","redux/fetchFlags.js","redux/cardFlip.js","components/regionSelector.js","components/searchBar.js","components/countryList.js","redux/flagQuizRedux.js","components/quizSetup.js","components/scoreQuiz.js","components/quizBody.js","components/quizScoreDisplay.js","components/quizResults.js","components/flagQuiz.js","components/FlashCards.js","components/knownFlags.js","App.js","redux/store.js","index.js"],"names":["Nav","to","className","Home","flagsPrepped","useSelector","state","flipCard","deck","map","country","src","flag","alt","name","fetchFlags","a","fetch","flags","json","cardFlipSlice","createSlice","initialState","region","searchTerm","reducers","loadCards","action","newDeck","payload","card","index","isFlipped","isSelected","isMemorized","mainDeckIndex","changeRegion","flip","updatedDeck","push","updateSearchTerm","deleteSearchTerm","toggleMemorization","markAsKnown","markAsUnknown","actions","RegionSelector","dispatch","useDispatch","allRegions","regionList","Set","value","for","onChange","e","selectedRegion","target","SearchBar","newSearchTerm","type","onClick","CountryList","currentRegion","currentDeckByRegion","filter","displayDeck","toLowerCase","includes","capital","population","subregion","noResults","length","flagQuizSlice","quizGenerated","quizInProgress","currentQuizQuestions","lastScore","currentTopScore","currentQuestion","quizLength","changeQuizLength","generateQuiz","handleSelection","questionNumber","questionIndex","selectedAnswer","optionIndex","answerOptions","assessQuiz","closeCurrentQuiz","incrementQuestion","decrementQuestion","QuizSetup","flagQuiz","currentDeck","newQuizLength","min","max","quizDeck","answerIndices","i","Math","floor","random","correctAnswer","optionIndices","j","optionNumber","correctAnswerSpliceIndex","splice","questionPacket","console","log","QuizScorer","score","question","option","percentage","parseInt","QuizBody","quizQuestions","options","choice","style","border","quizNav","currentQuestionDis","QuizScoreDisplay","QuizResults","mainDeck","colorForCorrect","backgroundColor","colorForIncorrect","resultsDiv","item","responseDisplay","selectedResponse","optionIfCorrect","optionIfIncorrect","correctResponse","isCorrect","correctResponseDisplay","closeQuiz","FlagQuiz","activeRegion","inProgress","FlashCards","cards","flipStatus","transform","KnownFlags","unmemorizedCards","memorizedCards","App","useEffect","exact","path","component","href","configureStore","reducer","flipCardReducer","flagQuizReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.fac3f6b0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Nav = () => {\r\n\r\n    return (\r\n        <>\r\n        <nav>   \r\n           <Link to=\"/\">Home</Link>  \r\n            <Link to=\"/CountryList\">Country List</Link> \r\n            <Link to=\"/KnownFlags\">Manage Flags</Link> \r\n            <Link to=\"/FlashCards\">Flash Cards</Link>   \r\n            <Link to=\"/FlagQuiz\">FlagQuiz</Link> \r\n            <h3 className=\"viewNav\" >Navigation</h3>    \r\n        </nav>\r\n        \r\n        </>\r\n    );\r\n}\r\n\r\nexport default Nav;","import { useSelector } from 'react-redux';\r\n\r\nconst Home = () => {\r\n    const flags = useSelector(state => state.flipCard.deck);\r\n\r\n    let flagsPrepped = flags.map((country) => {\r\n        return (\r\n            <img src={country.flag} alt={country.name} />\r\n        );\r\n    });\r\n\r\n    return (\r\n        <>\r\n            <h1>Learn Your Flags</h1>\r\n            <h2>Test yourself on the flags of countries and territories around the world.</h2>\r\n            <div className = \"flagBanner\">\r\n                {flagsPrepped}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Home;","const fetchFlags = async () => {\r\n    const flags = await fetch('https://restcountries.eu/rest/v2/all');\r\n    return flags.json();\r\n}\r\n\r\nexport const loadFlags = () => {\r\n    return async (dispatch) => {\r\n        const payload = await fetchFlags();\r\n        console.log(payload);\r\n        dispatch({type: \"cardFlip/loadCards\", payload: payload});\r\n    }\r\n}","import { createSlice } from '@reduxjs/toolkit';\r\nimport { fetchFlags } from './fetchFlags';\r\n\r\n\r\nexport const cardFlipSlice = createSlice({\r\n    name: \"cardFlip\",\r\n    initialState: {\r\n        deck: [],\r\n        region: \"All Regions\",\r\n        searchTerm: ''\r\n    },\r\n    reducers: {\r\n        loadCards: (state, action) => {\r\n            let deck = action.payload;\r\n            let newDeck = deck.map((card, index) => {\r\n               return {...card,\r\n            isFlipped: false,\r\n            isSelected: false,\r\n            isMemorized: false,\r\n            mainDeckIndex: index }\r\n            });\r\n            state.deck = newDeck;\r\n        },\r\n        changeRegion: (state, action) => {\r\n            let region = action.payload;\r\n            state.region = region;\r\n        },\r\n        flip: (state, action) => {\r\n            const deck = state.deck;\r\n            let updatedDeck = [];\r\n            for (let card of deck) {\r\n                if (card.name === action.payload) { \r\n                    card.isFlipped = !card.isFlipped\r\n                }\r\n            updatedDeck.push(card);\r\n            }\r\n            state = {\r\n                ...state,\r\n                deck: updatedDeck\r\n            }\r\n        },\r\n        updateSearchTerm: (state, action) => {\r\n            state.searchTerm = action.payload;\r\n        },\r\n        deleteSearchTerm: (state) => {\r\n            state.searchTerm = '';\r\n        },\r\n        toggleMemorization: (state, action) => {\r\n            const deck = state.deck;\r\n            let updatedDeck = [];\r\n            for (let card of deck) {\r\n                if (card.name === action.payload) { \r\n                    card.isMemorized = !card.isMemorized\r\n                }\r\n            updatedDeck.push(card);\r\n            }\r\n            state = {\r\n                ...state,\r\n                deck: updatedDeck\r\n            }\r\n        },\r\n        markAsKnown: (state, action) => {\r\n            const deck = state.deck;\r\n            let updatedDeck = [];\r\n            for (let card of deck) {\r\n                if (card.name === action.payload) { \r\n                    card.isMemorized = true;\r\n                }\r\n            updatedDeck.push(card);\r\n            }\r\n            state = {\r\n                ...state,\r\n                deck: updatedDeck\r\n            }\r\n        },\r\n        markAsUnknown: (state, action) => {\r\n            const deck = state.deck;\r\n            let updatedDeck = [];\r\n            for (let card of deck) {\r\n                if (card.name === action.payload) { \r\n                    card.isMemorized = false;\r\n                }\r\n            updatedDeck.push(card);\r\n            }\r\n            state = {\r\n                ...state,\r\n                deck: updatedDeck\r\n            }\r\n        }\r\n    }\r\n});\r\n\r\nexport const { flip, loadCards, changeRegion, updateSearchTerm, deleteSearchTerm, toggleMemorization, markAsKnown, markAsUnknown } = cardFlipSlice.actions;\r\nexport default cardFlipSlice.reducer;","import { useSelector, useDispatch } from 'react-redux';\r\nimport { changeRegion } from '../redux/cardFlip';\r\n\r\nconst RegionSelector = () => {\r\n    let deck = useSelector(state => state.flipCard.deck);\r\n    let dispatch = useDispatch();\r\n\r\n    const allRegions = deck.map(country => country.region);\r\n    const uniqueRegions = [...new Set(allRegions)];\r\n    let regionList = uniqueRegions.map((region) => {\r\n        return <option value={region} key={region}>{region}</option>;\r\n    });\r\n\r\n    const onChange = (e) => {\r\n        let selectedRegion = e.target.value;\r\n        dispatch(changeRegion(selectedRegion));\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <label for=\"regionSelector\">Select a region: </label>\r\n        <select name=\"regionSelector\" onChange={onChange} >\r\n            <option value=\"All Regions\" key=\"allRegions\">All Regions</option>\r\n            {regionList}\r\n        </select>\r\n        </>\r\n    );\r\n}\r\n\r\n\r\nexport default RegionSelector;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport { updateSearchTerm, deleteSearchTerm } from '../redux/cardFlip';\r\n\r\nconst SearchBar = () => {\r\n    let dispatch = useDispatch();\r\n\r\n    const onChange = (e) => {\r\n        let newSearchTerm = e.target.value;\r\n        dispatch(updateSearchTerm(newSearchTerm));\r\n    }\r\n\r\n    const onClick = () => {\r\n        dispatch(deleteSearchTerm());\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label for=\"searchBar\">Search: </label>\r\n            <input onChange={onChange} name=\"searchBar\" type=\"text\" />\r\n             <button onClick={onClick} >X</button>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default SearchBar;","import { useSelector } from 'react-redux';\r\nimport RegionSelector from './regionSelector';\r\nimport SearchBar from './searchBar';\r\n\r\nconst CountryList = () => {\r\n    let deck = useSelector(state => state.flipCard.deck);\r\n    let currentRegion = useSelector(state => state.flipCard.region);\r\n    let searchTerm = useSelector(state => state.flipCard.searchTerm);\r\n\r\n    let currentDeckByRegion = deck;\r\n    if (currentRegion !== \"All Regions\") {\r\n        currentDeckByRegion = deck.filter((card) => {\r\n            return (card.region === currentRegion)\r\n        });\r\n    }\r\n\r\n    let filteredDeck = currentDeckByRegion.filter((card) => {\r\n        return card.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n    });\r\n\r\n    let displayDeck = filteredDeck.map((country) => {\r\n        let alt = `The flag of ${country.name}`;\r\n        \r\n        return (\r\n        <div className=\"nameFlagDisplay\">\r\n            <div className=\"countryInfo\">\r\n                <h2>{country.name}</h2>\r\n                <h3>Capital City: {country.capital}</h3>\r\n                <h3>Estimated Population: {country.population}</h3>\r\n                <h3>Subregion: {country.subregion}, Region: {country.region}</h3>     \r\n            </div>\r\n            <img className=\"flagImage\" src={country.flag} alt={alt} />\r\n        </div>);\r\n    });\r\n\r\n    const noResults = <h3>This search term returned no results. Please try a different term or region.</h3>\r\n\r\n    return (\r\n        <>\r\n            <h1>Country and Territory Info: {currentRegion}</h1>\r\n            <RegionSelector />\r\n            <SearchBar />\r\n            <div className=\"flagDisplay\">\r\n                {(displayDeck.length > 0) ? displayDeck : noResults}\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default CountryList;","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const flagQuizSlice = createSlice({\r\n    name: \"flagQuizRedux\",\r\n    initialState: {\r\n        quizGenerated: false,\r\n        quizInProgress: false,\r\n        currentQuizQuestions: [],\r\n        lastScore: 0,\r\n        currentTopScore: 0,\r\n        currentQuestion: 0,\r\n        quizLength: 5 || this.deck.length\r\n    },\r\n    reducers: {\r\n        changeQuizLength: (state, action) => {\r\n            state.quizLength = action.payload;\r\n        },\r\n        generateQuiz: (state, action) => {\r\n            state.quizInProgress = true;\r\n            state.currentQuizQuestions = action.payload;\r\n            state.quizGenerated = true;\r\n        },\r\n        handleSelection: (state, action) => {\r\n            let questionNumber = action.payload.questionIndex;\r\n            let selectedAnswer = action.payload.optionIndex;\r\n            for (let item of state.currentQuizQuestions[questionNumber].answerOptions) {\r\n                item.isSelected = false;\r\n            }\r\n            state.currentQuizQuestions[questionNumber].answerOptions[selectedAnswer].isSelected = true;\r\n        },\r\n        assessQuiz: (state, action) => {\r\n            state.quizInProgress = false;\r\n            state.lastScore = action.payload;\r\n            if (action.payload > state.currentTopScore) state.currentTopScore = action.payload;\r\n        },\r\n        closeCurrentQuiz: (state) => {\r\n            state.quizGenerated = false;\r\n            state.quizInProgress = false;\r\n            state.currentQuizQuestions = [];\r\n        },\r\n        incrementQuestion: (state) => {\r\n            let questionNumber = state.currentQuestion;\r\n            questionNumber++;\r\n            if (questionNumber >= state.quizLength) questionNumber = 0;\r\n            state.currentQuestion = questionNumber;\r\n        },\r\n        decrementQuestion: (state) => {\r\n            let questionNumber = state.currentQuestion;\r\n            questionNumber--;\r\n            if (questionNumber < 0) questionNumber = state.quizLength - 1;\r\n            state.currentQuestion = questionNumber;\r\n        },\r\n    }\r\n});\r\n\r\nexport const { generateQuiz, handleSelection, assessQuiz, closeCurrentQuiz, changeQuizLength, incrementQuestion, decrementQuestion } = flagQuizSlice.actions;\r\nexport default flagQuizSlice.reducer;","import { useSelector, useDispatch } from 'react-redux';\r\nimport { changeQuizLength } from '../redux/flagQuizRedux';\r\nimport { generateQuiz } from '../redux/flagQuizRedux';\r\n\r\nconst QuizSetup = () => {\r\n    let deck = useSelector(state => state.flipCard.deck) || [];\r\n    let currentRegion = useSelector(state => state.flipCard.region);\r\n    let quizLength = useSelector(state => state.flagQuiz.quizLength);\r\n    let quizGenerated = useSelector(state => state.flagQuiz.quizGenerated);\r\n    let dispatch = useDispatch();\r\n\r\n    let currentDeck = deck;\r\n    if (currentRegion !== \"All Regions\") {\r\n        currentDeck = deck.filter((card) => {\r\n            return (card.region === currentRegion)\r\n        });\r\n    }\r\n    \r\n    const generateQuizDeck = () => { \r\n        let quizDeck = [];\r\n        let answerIndices = [];\r\n        for (let i = 0; i < quizLength; i++ ) {\r\n            let questionNumber = Math.floor(Math.random()*currentDeck.length);\r\n            while (answerIndices.includes(questionNumber)) {\r\n                questionNumber = Math.floor(Math.random()*currentDeck.length);\r\n            }\r\n            answerIndices.push(questionNumber);\r\n            const correctAnswer = currentDeck[questionNumber];\r\n            let answerOptions = [];\r\n            let optionIndices = [];\r\n            for (let j = 0; j < 3; j++) {\r\n                let optionNumber = Math.floor(Math.random()*deck.length);\r\n                while (optionIndices.includes(optionNumber) || currentDeck[questionNumber].name === deck[optionNumber].name) {\r\n                    optionNumber = Math.floor(Math.random()*deck.length);\r\n                }\r\n                optionIndices.push(optionNumber);\r\n                answerOptions.push(deck[optionNumber]);\r\n            }\r\n            let correctAnswerSpliceIndex = Math.floor(Math.random()*3);\r\n            answerOptions.splice(correctAnswerSpliceIndex, 0, correctAnswer, );\r\n     \r\n            const questionPacket = {\r\n                correctAnswer: correctAnswer,\r\n                answerOptions: answerOptions\r\n            }\r\n            \r\n            quizDeck.push(questionPacket);\r\n        }\r\n        console.log(\"quizDeck: \", quizDeck);\r\n        dispatch(generateQuiz(quizDeck));\r\n    }\r\n    \r\n    const onChange = (e) => {\r\n        let newQuizLength = e.target.value;\r\n        dispatch(changeQuizLength(newQuizLength));\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h3>Choose Quiz Length: </h3>\r\n            <br />\r\n            <input name=\"quizLength\" onChange={onChange} type=\"number\" min=\"5\" max={deck.length} /><span> (Max: {deck.length})</span>\r\n            <br />\r\n            <button onClick={generateQuizDeck}>Start Quiz</button>\r\n        </div>\r\n    );    \r\n}\r\n\r\nexport default QuizSetup;","import { useSelector, useDispatch } from 'react-redux';\r\nimport { assessQuiz } from '../redux/flagQuizRedux';\r\n\r\nconst QuizScorer = () => {\r\n    let dispatch = useDispatch();\r\n    let quizLength = useSelector(state => state.flagQuiz.quizLength);\r\n    let quizDeck = useSelector(state => state.flagQuiz.currentQuizQuestions);\r\n\r\n    const scoreQuiz = () => {\r\n        let score = 0;\r\n        for (let question of quizDeck) {\r\n            let selectedAnswer = question.answerOptions.filter(option => option.isSelected === true);\r\n            if (selectedAnswer.length > 0) {\r\n                if (selectedAnswer[0].name === question.correctAnswer.name) score++;\r\n            }\r\n            \r\n        }\r\n        let percentage = parseInt((score/quizLength)*100);\r\n        console.log(\"qL: \", quizLength);\r\n        console.log(\"percentage: \", percentage);\r\n        dispatch(assessQuiz(percentage));\r\n    }\r\n\r\n    return (\r\n        <button onClick={scoreQuiz}>Submit</button>\r\n    );\r\n}\r\n\r\nexport default QuizScorer;","import { useSelector, useDispatch } from 'react-redux';\r\nimport { handleSelection, incrementQuestion, decrementQuestion } from '../redux/flagQuizRedux';\r\nimport QuizScorer from './scoreQuiz';\r\n\r\n\r\nconst QuizBody = () => {\r\n    const quizDeck = useSelector(state => state.flagQuiz.currentQuizQuestions);\r\n    let quizInProgress = useSelector(state => state.flagQuiz.quizInProgress);\r\n    let quizGenerated = useSelector(state => state.flagQuiz.quizGenerated);\r\n    let questionNumber = useSelector(state => state.flagQuiz.currentQuestion);\r\n    let dispatch = useDispatch();\r\n\r\n        let quizQuestions = quizDeck.map((question, questionIndex) => {\r\n            let options = question.answerOptions.map((choice, optionIndex) => {\r\n\r\n                const onClick = () => {\r\n                    if (quizInProgress) {\r\n                        dispatch(handleSelection({questionIndex: questionIndex, optionIndex: optionIndex}));\r\n                    }     \r\n                }\r\n\r\n\r\n                const selectedStyle = {\r\n                    border: \"5px solid yellow\"\r\n                };\r\n\r\n                const unselectedStyle = {\r\n                    border: null\r\n                };\r\n\r\n                return (\r\n                    <div className=\"quizOption\">\r\n                        <img onClick={onClick} className=\"quizFlag\" src={choice.flag} alt=\"a flag\" style={choice.isSelected ? selectedStyle : unselectedStyle } />\r\n                    </div>\r\n                );\r\n            })\r\n\r\n            return (\r\n                <div className=\"questionContent\" >\r\n                    <h3>{questionIndex + 1}) Which flag represents <strong>{quizDeck[questionIndex].correctAnswer.name}</strong>?</h3>\r\n                    <div className=\"answerOptions\">\r\n                        {options}\r\n                    </div> \r\n                </div>    \r\n            );\r\n        });\r\n\r\n        \r\n        const quizNav = (\r\n            <div>\r\n                <button onClick={() => dispatch(decrementQuestion())} >PREVIOUS</button>\r\n                <button onClick={() => dispatch(incrementQuestion())} >NEXT</button>\r\n                <br />\r\n                <br />\r\n                <QuizScorer />                            \r\n            </div>     \r\n        );\r\n\r\n        let currentQuestionDis = quizQuestions[questionNumber];\r\n        \r\n\r\n    return (\r\n        <div className=\"quizBody\">\r\n            {quizGenerated && currentQuestionDis}\r\n            <br />\r\n            {quizGenerated && quizNav}    \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuizBody;","import { useSelector } from 'react-redux';\r\n\r\nconst QuizScoreDisplay = () => {\r\n\r\n    const lastScore = useSelector(state => state.flagQuiz.lastScore);\r\n    const currentTopScore = useSelector(state => state.flagQuiz.currentTopScore);\r\n\r\n    return (\r\n        <div className=\"scoreDisplay\">\r\n            <h3>Current Score: {lastScore}</h3>\r\n            <h3>Personal Best: {currentTopScore}</h3>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuizScoreDisplay;","import { useSelector, useDispatch } from 'react-redux';\r\nimport { closeCurrentQuiz } from '../redux/flagQuizRedux';\r\nimport { markAsKnown, markAsUnknown } from '../redux/cardFlip';\r\n\r\nconst QuizResults = () => {\r\n    const currentQuizQuestions = useSelector(state => state.flagQuiz.currentQuizQuestions);\r\n    const mainDeck = useSelector(state => state.flipCard.deck);\r\n    let dispatch = useDispatch();\r\n\r\n    const colorForCorrect = {\r\n        backgroundColor: \"rgb(208, 247, 208)\"\r\n    };\r\n\r\n    const colorForIncorrect = {\r\n        backgroundColor: \"rgb(247, 208, 208)\"\r\n    };\r\n    \r\n\r\n    const resultsDiv = currentQuizQuestions.map((item, index) => {\r\n        let selectedResponse = item.answerOptions.filter((option) => {\r\n           return option.isSelected === true\r\n        });\r\n\r\n        let responseDisplay;\r\n        if (selectedResponse[0]) {\r\n            responseDisplay = (\r\n                <div>\r\n                    <img src={selectedResponse[0].flag} alt={selectedResponse[0].name} />\r\n                    <p>You selected: {selectedResponse[0].name}.</p> \r\n                </div>\r\n            );\r\n        } else { \r\n            responseDisplay = (\r\n                <div>\r\n                    <p>No response selected.</p>\r\n                </div>\r\n            );\r\n        }\r\n\r\n        const correctResponse = item.correctAnswer;\r\n        const isCorrect = ((selectedResponse[0]) && item.correctAnswer.name === selectedResponse[0].name);\r\n\r\n        const correctResponseDisplay = (\r\n            <div>\r\n                <img src={correctResponse.flag} alt={correctResponse.name} />\r\n                <p>Correct response: {correctResponse.name}.</p>  \r\n            </div> \r\n        );\r\n\r\n        let optionIfCorrect;\r\n        if (!mainDeck[correctResponse.mainDeckIndex].isMemorized) {\r\n            optionIfCorrect = (\r\n                <button onClick={() => {dispatch(markAsKnown(correctResponse.name))}}>Mark as Memorized</button>);\r\n        } else {\r\n            optionIfCorrect = <h3>Memorized &#10004;</h3>;\r\n        }\r\n\r\n        let optionIfIncorrect;\r\n        if (mainDeck[correctResponse.mainDeckIndex].isMemorized) {\r\n            optionIfIncorrect = (\r\n                <button onClick={() => {dispatch(markAsUnknown(correctResponse.name))}}>Mark  {correctResponse.name} as Not Memorized</button>);\r\n        } else {\r\n            optionIfIncorrect = <h3>Not Memorized &#10008;</h3>;\r\n        }\r\n\r\n        return (    \r\n                <div className=\"resultDiv\" style={(isCorrect) ? colorForCorrect : colorForIncorrect} >\r\n                    <p>Question {index + 1}</p>\r\n                    <div className=\"results\">\r\n                        {correctResponseDisplay}\r\n                        {responseDisplay}\r\n                    </div>\r\n                    {(isCorrect) ? optionIfCorrect : optionIfIncorrect}\r\n                </div>\r\n        );\r\n    });\r\n\r\n    const closeQuiz = () => {\r\n        dispatch(closeCurrentQuiz());\r\n    }\r\n\r\n    return (\r\n        <div className=\"resultsComponent\">\r\n            <h2>Results</h2>\r\n            <button onClick={closeQuiz}>Close Results</button>\r\n            <div className=\"allResults\">\r\n                {resultsDiv}\r\n            </div>\r\n            <button onClick={closeQuiz}>Close Results</button> \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuizResults;","import QuizSetup from './quizSetup';\r\nimport QuizBody from './quizBody';\r\nimport QuizScoreDisplay from './quizScoreDisplay';\r\nimport QuizResults from './quizResults';\r\nimport RegionSelector from './regionSelector';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst FlagQuiz = () => {\r\n    let activeRegion = useSelector(state => state.flipCard.region);\r\n    let inProgress = useSelector(state => state.flagQuiz.quizInProgress);\r\n    let quizGenerated = useSelector(state => state.flagQuiz.quizGenerated);\r\n\r\n   return (\r\n       <div>\r\n           <h1>Flag Quiz: {activeRegion}</h1>\r\n           <RegionSelector />\r\n           <div className=\"quizInfo\">\r\n            {(!inProgress) && <QuizSetup />}\r\n            <QuizScoreDisplay />\r\n           </div>\r\n           {(inProgress) && <QuizBody />}\r\n           {(quizGenerated && !inProgress) && <QuizResults />}\r\n       </div>\r\n   ); \r\n}\r\n\r\nexport default FlagQuiz;","import React from 'react';\r\nimport RegionSelector from \"./regionSelector\";\r\nimport { flip, toggleMemorization } from '../redux/cardFlip';\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n\r\n\r\n\r\nexport const FlashCards = () => {\r\n    const dispatch = useDispatch();\r\n    let cards = useSelector(state => state.flipCard.deck);\r\n    let currentRegion = useSelector(state => state.flipCard.region);\r\n\r\n    // let shuffledCards = [];\r\n    // for (let card of cards) {\r\n    //     let insertAtIndex = Math.floor(Math.random()*shuffledCards.length);\r\n    //     shuffledCards.splice(insertAtIndex, 0, card);\r\n    // }\r\n\r\n    let currentDeck = cards;\r\n    if (currentRegion !== \"All Regions\") {\r\n        currentDeck = cards.filter((card) => {\r\n            return (card.region === currentRegion)\r\n        });\r\n    }\r\n\r\n    let unmemorizedDeck = currentDeck.filter((card) => {\r\n        return !card.isMemorized;\r\n    })\r\n\r\n    let deck = unmemorizedDeck.map((card) => {\r\n        let flipStatus = card.isFlipped ? \"rotateY(0deg)\" : \" rotateY(180deg)\";\r\n\r\n        return (\r\n            <div className=\"cardWrap\" onClick={() => dispatch(flip(card.name))}>\r\n                <div className=\"card\" style={{transform: flipStatus}}>\r\n                    <div className=\"cardFront\">\r\n                        <img className=\"flagImage\" src={card.flag} alt=\"a flag\" />\r\n                    </div>\r\n                    <div className=\"cardBack\">\r\n                        <span>{card.name}</span>\r\n                        <img className=\"flagImage\" src={card.flag} alt=\"a flag\" />\r\n                            <button onClick={() => dispatch(toggleMemorization(card.name))}>I know this one!</button>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n        ); \r\n    });\r\n\r\n    return (\r\n        <div className=\"boardContainer\">\r\n            <h1>Flash Cards: {currentRegion}</h1>\r\n            <RegionSelector />\r\n            <div className=\"boardView\">\r\n                {deck}\r\n            </div>\r\n        </div>    \r\n    );\r\n}","import { useSelector, useDispatch } from 'react-redux';\r\nimport { toggleMemorization } from '../redux/cardFlip';\r\nimport RegionSelector from './regionSelector';\r\nimport SearchBar from './searchBar';\r\n\r\nconst KnownFlags = () => {\r\n    const dispatch = useDispatch();\r\n    const cards = useSelector(state => state.flipCard.deck);\r\n    const searchTerm = useSelector(state => state.flipCard.searchTerm);\r\n    const currentRegion = useSelector(state => state.flipCard.region);\r\n\r\n    let currentDeckByRegion = cards;\r\n    if (currentRegion !== \"All Regions\") {\r\n        currentDeckByRegion = cards.filter((card) => {\r\n            return (card.region === currentRegion)\r\n        });\r\n    }\r\n    const currentDeck = currentDeckByRegion.filter((card) => {\r\n        return (card.name.toLowerCase().includes(searchTerm.toLowerCase()));\r\n    });\r\n\r\n    const unmemorizedCards = currentDeck.filter((card) => {\r\n        return !card.isMemorized;\r\n    }).map((card) => {\r\n        return (\r\n            <div className=\"unmemorizedFlag\" onClick={() => dispatch(toggleMemorization(card.name))} >\r\n                <img src={card.flag} alt={card.name} />\r\n                <h4>{card.name}</h4>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    const memorizedCards = currentDeck.filter((card) => {\r\n        return card.isMemorized;\r\n    }).map((card) => {\r\n        return (\r\n            <div className=\"memorizedFlag\" onClick={() => dispatch(toggleMemorization(card.name))} >\r\n                <img src={card.flag} alt={card.name} />\r\n                <h4>{card.name}</h4>\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            <h1>Manage Flags</h1>\r\n            <RegionSelector />\r\n            <SearchBar />\r\n            <div className=\"knownAndUnknownFlags\">\r\n                <div>\r\n                    <h2>Unmemorized</h2>\r\n                    <div className=\"memFlagList\">\r\n                        {unmemorizedCards}\r\n                    </div>     \r\n                </div>\r\n                <div>\r\n                    <h2>Memorized</h2>\r\n                    <div className=\"memFlagList\">\r\n                        {memorizedCards}\r\n                    </div>  \r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    );\r\n}\r\n\r\nexport default KnownFlags;","import './App.css';\nimport Nav from './components/nav';\nimport Home from './components/home';\nimport CountryList from './components/countryList';\nimport FlagQuiz from './components/flagQuiz';\nimport { FlashCards } from \"./components/FlashCards\";\nimport KnownFlags from './components/knownFlags';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport { loadFlags } from './redux/fetchFlags';\nimport { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\n//reddit toolkit and middleware: https://www.youtube.com/watch?v=qA6oyQQTJ3I\n\n\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadFlags());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Nav />\n        <main>\n          <Switch>\n            <Route exact path='/' component={Home} /> \n            <Route path='/CountryList' exact component={CountryList} />\n            <Route path='/KnownFlags' exact component={KnownFlags} /> \n            <Route path='/FlashCards' exact component={FlashCards} />  \n            <Route path=\"/FlagQuiz\" exact component={FlagQuiz} />  \n          </Switch>  \n        </main>\n      </Router>\n      <footer>\n        <h3>Created with the <a href=\"https://restcountries.eu/\">restcountries.eu</a> API</h3>\n        <h3>A project by <a href=\"https://patricklang87.github.io/portfolio/\" >Patrick Lang</a></h3>\n        <h3>&copy; 2021</h3>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport flipCardReducer from './cardFlip';\r\nimport flagQuizReducer from './flagQuizRedux';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        flipCard: flipCardReducer,\r\n        flagQuiz: flagQuizReducer\r\n    }\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}